<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Cloudflare节点</title>
    <url>/2023/07/31/Cloudflare%E8%8A%82%E7%82%B9/</url>
    <content><![CDATA[<p><img src="C:/Users/Administrator/AppData/Roaming/Typora/typora-user-images/image-20230731184321844.png" alt="image-20230731184321844"></p>
<span id="more"></span>

<h2 id="目的及意义"><a href="#目的及意义" class="headerlink" title="目的及意义"></a>目的及意义</h2><p>1.可以白嫖跑满宽带的网速；2.为了作为备用节点，防止无法进行学术文献下载。</p>
<h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="1-使用临时邮箱注册cloudflare"><a href="#1-使用临时邮箱注册cloudflare" class="headerlink" title="1.使用临时邮箱注册cloudflare"></a>1.使用临时邮箱注册cloudflare</h3><p>临时邮箱：<a href="https://www.linshiyouxiang.net/">https://www.linshiyouxiang.net/</a></p>
<p>cloudflare官网：<a href="https://www.cloudflare.com/zh-cn/">https://www.cloudflare.com/zh-cn/</a></p>
<h3 id="2-cloudflare部署项目"><a href="#2-cloudflare部署项目" class="headerlink" title="2.cloudflare部署项目"></a>2.cloudflare部署项目</h3><p>1）登录账号，找到左侧workers栏，点击创建worker，</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230731173121153.png" alt="image-20230731173121153"></p>
<p>2）输入woker名称后，点击右下角的部署，进入页面后，继续点击<strong>配置worker</strong>，进入后点击右上角的快速编辑；</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230731173341029.png" alt="image-20230731173341029"></p>
<p>3）删除所有代码，输入新的代码：<a href="https://github.com/zizifn/edgetunnel/blob/main/src/worker-vless.js">https://github.com/zizifn/edgetunnel/blob/main/src/worker-vless.js</a></p>
<p>需要修改两个部分：</p>
<p>UID：<a href="https://1024tools.com/uuid">https://1024tools.com/uuid</a>  使用这个网址可以生成UID</p>
<p>代理ip：CDN加速 可以从下面五个中选择一个</p>
<p>填好后选择部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cdn-all.xn--b6gac.eu.org</span><br><span class="line">cdn.xn--b6gac.eu.org </span><br><span class="line">cdn-b100.xn--b6gac.eu.org </span><br><span class="line">edgetunnel.anycast.eu.org </span><br><span class="line">cdn.anycast.eu.org （亚洲地区）</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">建议选下面的这个ip，可以用</span></span><br><span class="line">103.200.112.108</span><br></pre></td></tr></table></figure>

<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230731173943794.png" alt="image-20230731173943794"></p>
<p>4）通过将get请求和UID组合在浏览器进行搜索，就会得到vless地址</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230731175355897.png" alt="image-20230731175355897"></p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230731175510732.png" alt="image-20230731175510732"></p>
<p>5）将vless地址复制到V2rayN软件中去设置</p>
<p>设置id：使用优选ip软件，在进行iP优选时需要关闭所有代理：<a href="https://github.com/badafans/better-cloudflare-ip/releases">https://github.com/badafans/better-cloudflare-ip/releases</a></p>
<p>设置端口号：80端口，或者2052端口</p>
<p>不设置域名</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230731180050376.png" alt="image-20230731180050376"></p>
]]></content>
  </entry>
  <entry>
    <title>Nodejs后端</title>
    <url>/2023/04/25/Nodejs%E5%90%8E%E7%AB%AF/</url>
    <content><![CDATA[<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230425095820683.png" alt="image-20230425095820683"></p>
<span id="more"></span>

<h1 id="为什么选择Nodejs？"><a href="#为什么选择Nodejs？" class="headerlink" title="为什么选择Nodejs？"></a>为什么选择Nodejs？</h1><p>后端搭建api接口的方式有很多，可以使用python，java，c#等等技术，但是为了方便使用，所以我们使用nodejs这种前端语言来进行后端的搭建，更加方便，但是要考虑性能的话，还需后面再考虑使用性能更高的后端技术。</p>
<h1 id="基于express框架的node后端搭建"><a href="#基于express框架的node后端搭建" class="headerlink" title="基于express框架的node后端搭建"></a>基于express框架的node后端搭建</h1><h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><p>需要安装node.js环境</p>
<h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>1.新建一个文件夹，进入文件夹内，输入  <strong>npm init</strong>  初始化一个node环境，会生成一个  <strong>package.json</strong>  文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure>

<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230425103606403.png" alt="image-20230425103606403"></p>
<p>上面箭头指向的中间都是可以自定义的参数，最后这些参数会写道package.json文件中去</p>
<p>2.初始化目录中安装<strong>express</strong>框架</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install express --save</span><br></pre></td></tr></table></figure>

<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230425104229027.png" alt="image-20230425104229027"></p>
<p>3.在根目录下创建一个 <strong>index.js</strong>  文件，在里面写接口代码，为什么要用这个名字，因为在初始化的使用默认是index.js,在里面编写下面的代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>()</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3001</span>);</span><br></pre></td></tr></table></figure>

<p>这里  <strong>req</strong>  表示 <strong>前端传入的信息</strong> ； <strong>res</strong>  表示 <strong>后端处理好要传给前端的信息</strong> ；</p>
<p>4.使用下面的指令将服务跑起来，然后访问 <strong>localhost:3001</strong>  看是否返回数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure>

<h1 id="为express框架设置路由"><a href="#为express框架设置路由" class="headerlink" title="为express框架设置路由"></a>为express框架设置路由</h1><h2 id="背景需求"><a href="#背景需求" class="headerlink" title="背景需求"></a>背景需求</h2><p>如果不设置路由，那么所有的请求都写在index.js文件中，会是的代码很臃肿，并且不方便后期维护，所以我们需要根据不同的数据请求和处理将api进行分类管理，在index.js中只需要配置全局的设置即可，这样方便管理和维护；</p>
<h2 id="操作步骤-1"><a href="#操作步骤-1" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>1.在根目录下新建一个 <strong>routers</strong> 的文件夹，在文件夹内部新建一个  路由文件 ，在文件中编写后台需要的接口代码</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230425112110108.png" alt="image-20230425112110108"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> router = express.<span class="title class_">Router</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/get&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;user get&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/insert&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;user insert&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = router;</span><br></pre></td></tr></table></figure>

<p>2.在  <strong>index.js</strong>  文件中引用这个文件，填写配置路由信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//引入自定义的接口文件</span></span><br><span class="line"><span class="keyword">let</span> user = <span class="built_in">require</span>(<span class="string">&#x27;./routers/user&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> home = <span class="built_in">require</span>(<span class="string">&#x27;./routers/home&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义接口</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>,home);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/user&#x27;</span>,user);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3001</span>);</span><br></pre></td></tr></table></figure>

<p>3.现在express的路由就配置完成了！</p>
<h1 id="Nodejs连接postgresql数据库"><a href="#Nodejs连接postgresql数据库" class="headerlink" title="Nodejs连接postgresql数据库"></a>Nodejs连接postgresql数据库</h1><h2 id="操作步骤-2"><a href="#操作步骤-2" class="headerlink" title="操作步骤"></a>操作步骤</h2><p>1.使用npm安装pg</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install pg --save</span><br></pre></td></tr></table></figure>

<p>2.连接和配置数据库</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pg = <span class="built_in">require</span>(<span class="string">&#x27;pg&#x27;</span>);</span><br><span class="line"><span class="comment">//数据库配置</span></span><br><span class="line"><span class="keyword">var</span> conString = <span class="string">&quot;tcp://postgres:root@localhost/nodejspg&quot;</span>; <span class="comment">//tcp://用户名：密码@localhost/数据库名</span></span><br><span class="line"><span class="keyword">var</span> client =  <span class="keyword">new</span> pg.<span class="title class_">Client</span>(conString);</span><br><span class="line"></span><br><span class="line"><span class="comment">//sql语句</span></span><br><span class="line">selectSQLString = <span class="string">&#x27;SELECT * FROM &quot;test&quot; &#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//客户端连接，进行数据插入</span></span><br><span class="line">client.<span class="title function_">connect</span>(<span class="keyword">function</span>(<span class="params">error, results</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="comment">// 设置返回前端的数据，通过res设置</span></span><br><span class="line">        res.<span class="title function_">send</span>(&#123;</span><br><span class="line">            <span class="attr">status</span>:<span class="string">&#x27;fail&#x27;</span>,</span><br><span class="line">            <span class="attr">msg</span>:error.<span class="property">message</span></span><br><span class="line">        &#125;)</span><br><span class="line">        client.<span class="title function_">end</span>();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;connection success...\n&#x27;</span>);</span><br><span class="line">    client.<span class="title function_">query</span>(selectSQLString,<span class="keyword">function</span>(<span class="params">error,results</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(error)&#123;</span><br><span class="line">            <span class="comment">// 设置返回前端的数据，通过res设置</span></span><br><span class="line">            res.<span class="title function_">send</span>(&#123;</span><br><span class="line">                <span class="attr">status</span>:<span class="string">&#x27;fail&#x27;</span>,</span><br><span class="line">                <span class="attr">msg</span>:error.<span class="property">message</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">// 设置返回前端的数据，通过res设置</span></span><br><span class="line">            res.<span class="title function_">send</span>(&#123;</span><br><span class="line">                <span class="attr">status</span>:<span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">                <span class="attr">msg</span>:results.<span class="property">rows</span></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        client.<span class="title function_">end</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>如果需要传入多个参数进行SQL查询，就要用到$符号</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">client.<span class="title function_">query</span>(<span class="string">&#x27;SELECT * FROM &quot;test&quot; whereis $1&#x27;</span>,[<span class="string">&#x27;admin&#x27;</span>],<span class="keyword">function</span>(<span class="params">error,results</span>)&#123;</span><br><span class="line">    执行代码</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>在这里可以看出来，如果有多个参数输入的话，那么就用多个 $2 这样类似的，后面的参数接着真正传入的参数；</p>
]]></content>
  </entry>
  <entry>
    <title>Vm虚拟机</title>
    <url>/2023/04/18/Vm%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230418144031049.png" alt="image-20230418144031049"></p>
<span id="more"></span>

<h2 id="VM下设置与主机共享文件夹"><a href="#VM下设置与主机共享文件夹" class="headerlink" title="VM下设置与主机共享文件夹"></a>VM下设置与主机共享文件夹</h2><p>1.关闭虚拟机，点击<strong>编辑虚拟机设置</strong>–&gt;<strong>选项</strong>–&gt;<strong>共享文件夹</strong>–&gt;选择主机需要共享的文件夹</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230418141612587.png" alt="image-20230418141612587"></p>
<p>2.启动虚拟机，进入root权限输入下面的指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install open-vm-tools</span><br><span class="line"></span><br><span class="line">mkdir /mnt/hgfs</span><br><span class="line"></span><br><span class="line">/usr/bin/vmhgfs-fuse .host:/ /mnt/hgfs -o subtype=vmhgfs-fuse,allow_other</span><br></pre></td></tr></table></figure>

<p>3.输出这三行指令后，在主界面的 mnt&#x2F;hgfs&#x2F;  文件夹下可以找到共享的文件夹</p>
<p>4.设置开机自动挂载</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gedit /etc/fstab</span><br></pre></td></tr></table></figure>

<p>在文件中加入下面这行代码进程，保存即可</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.host:/         /mnt/hgfs         fuse.vmhgfs-fuse allow_other,defaults   0       0</span><br></pre></td></tr></table></figure>

<p><a href="https://superuser.com/questions/588304/no-mnt-hgfs-in-ubuntu-guest-under-vmware-fusion">参考网址</a></p>
<hr>
<h2 id="VM下设置root账户登录"><a href="#VM下设置root账户登录" class="headerlink" title="VM下设置root账户登录"></a>VM下设置root账户登录</h2><p>1.为root账户设置密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd  root</span><br></pre></td></tr></table></figure>

<p>2.测试登录root账号，登录成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su root    //登录root账号</span><br></pre></td></tr></table></figure>

<p>3.修改50-ubuntu.conf配置文件内容，文件路径：&#x2F;usr&#x2F;share&#x2F;lightdm&#x2F;lightdm.conf.d&#x2F;50-ubuntu.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//修改文件权限</span><br><span class="line">chmod  777  /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf</span><br><span class="line"></span><br><span class="line">//打开文件修改内容</span><br><span class="line">gedit  /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf</span><br></pre></td></tr></table></figure>

<p>在打开的文档里面加上下面的代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">greeter-show-manual-login=true</span><br><span class="line">all-guest=false</span><br></pre></td></tr></table></figure>

<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230418142019624.png" alt="image-20230418142019624"></p>
<p>4.修改<strong>gdm-autologin和gdm-passwd</strong>文件，文件路径：&#x2F;etc&#x2F;pam.d</p>
<p>打开两个文件 注释掉 <strong>auth required pam_success_if.so user!&#x3D;root quiet_success</strong>这一行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//修改文件权限</span><br><span class="line">sudo  chmod  777 /etc/pam.d/gdm-autologin</span><br><span class="line">sudo  chmod  777 /etc/pam.d/gdm-password</span><br><span class="line"></span><br><span class="line">//编辑文件</span><br><span class="line">gedit /etc/pam.d/gdm-autologin</span><br><span class="line">gedit /etc/pam.d/gdm-password </span><br></pre></td></tr></table></figure>

<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230418142122470.png" alt="image-20230418142122470"></p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230418142127056.png" alt="image-20230418142127056"></p>
<p>5.修改**&#x2F;root&#x2F;.profile**文件</p>
<p>编辑该配置文件，在最后最后一行，加上  <strong>tty -s&amp;&amp;mesg n || true</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gedit /root/.profile</span><br></pre></td></tr></table></figure>

<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230418142225510.png" alt="image-20230418142225510"></p>
<p>6.重启虚拟机，选择其他账户，输入root用户名和密码即可登录</p>
<hr>
<h2 id="Linux下安装QT"><a href="#Linux下安装QT" class="headerlink" title="Linux下安装QT"></a>Linux下安装QT</h2><p>在国产麒麟系统中配置pyside2用下面的指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">注意这里  python的版本必须是3.7</span></span><br><span class="line">conda install -c &quot;conda-forge/label/gcc7&quot; pyside2</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">最新消息，上面的指令可以不参考，只要python大于等于3.8版本的，可以直接使用conda指令安装pyside2和cartopy两个库</span></span><br></pre></td></tr></table></figure>

<p>1.下载QT</p>
<p>进入<a href="https://download.qt.io/archive/qt/">QT</a>官网下载需要的版本</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230418142905209.png" alt="image-20230418142905209"></p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230418142914325.png" alt="image-20230418142914325"></p>
<p>2.打开Linux系统，在安装前对环境进行配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//更新apt源</span><br><span class="line">apt update</span><br><span class="line"></span><br><span class="line">//安装gcc </span><br><span class="line">apt install gcc</span><br><span class="line">apt install gcc-c++</span><br><span class="line"></span><br><span class="line">//安装make</span><br><span class="line">apt -y install gcc automake autoconf libtool make</span><br><span class="line"></span><br><span class="line">//安装openGL库</span><br><span class="line">apt install mesa*</span><br><span class="line">apt install freeglut*</span><br></pre></td></tr></table></figure>

<p>3.找到下载QT的安装包位置，输入下面的指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 设置安装包的权限</span><br><span class="line">chmod 777 qt-opensource-linux-x64-5.14.2.run</span><br><span class="line"></span><br><span class="line">//进行安装</span><br><span class="line">./qt-opensource-linux-x64-5.14.2.run</span><br></pre></td></tr></table></figure>

<p>4.关闭网络进行QT安装</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230418143059927.png" alt="image-20230418143059927"></p>
<p>5.安装默认一直点next，如果中间发生闪退的原因就<strong>重新安装其他版本</strong></p>
<p>6.配置qt环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//修改配置文件</span><br><span class="line">gedit /etc/profile</span><br></pre></td></tr></table></figure>

<p>在<strong>文件尾部加入环境变量</strong>，注意这里加入两条路径，一个是gcc或者gcc_64下的bin目录，一个是&#x2F;Tools&#x2F;QtCreator下的bin目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//其中Qt的路径和自己安装的Qt版本有关</span><br><span class="line">export PATH=/opt/Qt5.14.2/5.14.2/gcc_64/bin:$PATH</span><br><span class="line">export PATH=/opt/Qt5.14.2/Tools/QtCreator/bin:$PATH</span><br></pre></td></tr></table></figure>

<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230418143303887.png" alt="image-20230418143303887"></p>
<p>7.重新加载环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//重新加载环境变量</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">//测试环境变量是否配置成果，输入下面指令，正常来说是可以启动QT的</span><br><span class="line">// 如果没有启动说明环境变量没有配置成果</span><br><span class="line">qtcreator</span><br></pre></td></tr></table></figure>

<p>8.确认gcc和g++的版本,要保证gcc和g++与<strong>其他共同使用的人的一致</strong>，不然代码会无法在其他人环境中编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -v</span><br><span class="line">g++ -v</span><br><span class="line">qmake -v</span><br></pre></td></tr></table></figure>

<p>9.到第七步如果可以正常启动qt就说明已经安装成功了！</p>
<p>10.若有需要可以对g++，gcc的版本进行修改请参考下面的文章</p>
<p><a href="https://blog.csdn.net/weixin_44092851/article/details/124978302">linux修改gcc和g++的方法</a></p>
<p><strong>参考：</strong><a href="https://blog.csdn.net/weixin_44092851/article/details/124978823">文章来源</a></p>
<p>Centos7 安装QT教程：<a href="https://blog.csdn.net/m0_71622680/article/details/131775588">https://blog.csdn.net/m0_71622680/article/details/131775588</a></p>
<h2 id="Centos-安装anaconda"><a href="#Centos-安装anaconda" class="headerlink" title="Centos 安装anaconda"></a>Centos 安装anaconda</h2><p>1.在<a href="https://www.anaconda.com/download">anaconda官网</a>下载对应版本</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230804152217578.png" alt="image-20230804152217578"></p>
<p>2.在下载位置打开Centos终端，执行下面的指令安装anaconda</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash Anaconda3-2020.11-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>

<p>按照提示一直确定，直到出现确定安装路径 (<strong>可自定义安装路径</strong>)，等待安装完毕。</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230804152848434.png" alt="image-20230804152848434"></p>
<p>初始化后，执行下面指令，即可正常使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure>

<p>如果不想显示 <strong>base</strong>，则执行下面的命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">不自动激活base环境</span></span><br><span class="line">conda config --set auto_activate_base false</span><br></pre></td></tr></table></figure>

<p><a href="https://blog.csdn.net/LJX_ahut/article/details/114282900">参考文章</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/559103883">Centos Anaconda安装与卸载</a></p>
<h2 id="在Centos下安装-VsCode（使用子账户安装）"><a href="#在Centos下安装-VsCode（使用子账户安装）" class="headerlink" title="在Centos下安装 VsCode（使用子账户安装）"></a>在Centos下安装 VsCode（使用子账户安装）</h2><p>1.首先登录当前用户的子账户具有sudo权限的用户，如果没有可以通过下面的方法进行简单设置：</p>
<p>使用root账户，将我们的子账户添加到 <strong>wheel</strong> 组中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-a表示追加用户到指定组，-G表示不要将用户从其他组中移除</span></span><br><span class="line">usermod -aG wheel username</span><br></pre></td></tr></table></figure>

<p>验证用户是否加入成功，<strong>切换到子用户</strong>，输入下面的指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo whoami</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#结果显示 root 则表示添加成功</span></span></span><br></pre></td></tr></table></figure>

<p><a href="https://www.myfreax.com/how-to-add-user-to-sudoers-in-centos/">参考来源</a></p>
<p>2.切换子账户，依次输入下面的指令</p>
<p>在CentOS 8系统上安装Visual Studio Code的最简单和推荐的方法是启用VS Code存储库并通过yum命令安装vscode。首先执行rpm命令导入Microsoft GPG密钥：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rpm --import https://packages.microsoft.com/keys/microsoft.asc</span><br></pre></td></tr></table></figure>

<p>使用Vim打开文件进行编辑：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo vim /etc/yum.repos.d/vscode.repo</span><br></pre></td></tr></table></figure>

<p>将下面的内容粘贴到打开的文件中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[code]</span><br><span class="line">name=Visual Studio Code</span><br><span class="line">baseurl=https://packages.microsoft.com/yumrepos/vscode</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">gpgkey=https://packages.microsoft.com/keys/microsoft.asc</span><br></pre></td></tr></table></figure>

<p>保存文件，并输入命令进行安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum install code</span><br></pre></td></tr></table></figure>

<p>现在vscode已经安装完毕。</p>
<p>键入 <strong>code</strong> 启动程序，如果报错，是因为权限不够，就切换root账户，修改权限，然后使用子账户重新启动</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">修改权限指令</span></span><br><span class="line">chmod 777 需要修改的文件</span><br></pre></td></tr></table></figure>

<p>如果以  <strong>root权限</strong>  启动，则需要输入下面的指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">data2  表示一个指定的位置，可以随意指定</span></span><br><span class="line">code --no-sandbox --user-data-dir=/data2</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="anaconda配置-cartopy-环境"><a href="#anaconda配置-cartopy-环境" class="headerlink" title="anaconda配置 cartopy 环境"></a>anaconda配置 cartopy 环境</h2><p>依次输入下面的三条指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">这里环境中使用的python 为3.7版本的</span></span><br><span class="line">conda install geos</span><br><span class="line">conda install pyshp</span><br><span class="line">conda install shapely</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看shapely库的版本</span></span><br><span class="line">conda list shapely</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">继续安装 cartopy</span></span><br><span class="line">conda install cartopy</span><br><span class="line"></span><br><span class="line">conda list cartopy</span><br></pre></td></tr></table></figure>

<p>（上面的不一定有用），这个操作仅<strong>限于国产麒麟系统</strong>，最新操作（可能）：<em><strong>这个方法最后再用</strong></em></p>
<p>1.先安装 geos，直接 yum install geos</p>
<p>2.再安装 proj，直接 yum install proj</p>
<p>3.安装 yum install geos-devel</p>
<p>4.直接去cartopy官网的conda安装指令即可</p>
<p>第三步参考这个：<a href="https://blog.csdn.net/weixin_36033884/article/details/116887975">https://blog.csdn.net/weixin_36033884/article/details/116887975</a></p>
<p>第一步和第二步参考这个：<a href="https://www.bilibili.com/video/BV1WF411A7rx/?spm_id_from=333.999.0.0&vd_source=9c197626a7aa78cb9eec601cfd137fae">https://www.bilibili.com/video/BV1WF411A7rx/?spm_id_from=333.999.0.0&amp;vd_source=9c197626a7aa78cb9eec601cfd137fae</a></p>
<p>在打包环境配置，使用pip安装pyinstaller</p>
]]></content>
  </entry>
  <entry>
    <title>WebGIS开发</title>
    <url>/2023/04/27/WebGIS%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230427162522558.png" alt="image-20230427162522558"></p>
<span id="more"></span>

<h1 id="基于Vue、SuperMap-iClient-for-Leaflet搭建开发环境"><a href="#基于Vue、SuperMap-iClient-for-Leaflet搭建开发环境" class="headerlink" title="基于Vue、SuperMap iClient for Leaflet搭建开发环境"></a>基于Vue、SuperMap iClient for Leaflet搭建开发环境</h1><h2 id="一、搭建Vue开发环境"><a href="#一、搭建Vue开发环境" class="headerlink" title="一、搭建Vue开发环境"></a>一、搭建Vue开发环境</h2><p>1.下载node.js，<a href="https://nodejs.org/en">建议使用长期稳定版本</a></p>
<p>2.安装完毕后，调出命令行窗口，输入下面指令，分别查看node和npm的版本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">node --version</span><br><span class="line"></span><br><span class="line">npm --version</span><br></pre></td></tr></table></figure>

<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230427163321046.png" alt="image-20230427163321046"></p>
<p>3.如果终端窗口输出对应的版本好，说明我们安装成功，可以进行下一步配置。</p>
<p>4.为了提升npm下载包的速度，还需要配置淘宝镜像环境。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看原始npm下载包地址：</span></span><br><span class="line">npm config get registry</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改为淘宝镜像地址</span></span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>5.自定义一个文件夹，并使用vscode打开该文件夹，并使用终端输入指令 <strong>npm init vue@latest</strong> 初始化一个Vue项目  参考<a href="https://cn.vuejs.org/">官网</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure>

<p>然后按自己的要求选择配置信息：我这边只<strong>修改了项目名称</strong>，其他的都是默认设置</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230427164049516.png" alt="image-20230427164049516"></p>
<p>初始化完毕之后，就会生成一个   SuperMap   的文件夹，然后我们进入到生成的文件夹中，输入指令 <strong>npm install</strong>  安装对应的依赖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install </span><br></pre></td></tr></table></figure>

<p>安装完毕后，输入指令 <strong>npm run dev</strong> 就能把项目跑起来，复制终端生成的 <strong>地址</strong>  ，用浏览器打开就能进行访问</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure>

<p>停止项目，只需要在终端 键盘键入 <strong>CTRL + C</strong>  即可</p>
<p>5.在新的项目创建后，需要删除一些无关的文件，进入项目目录，把下面框住的文件全部删除</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230427165216029.png" alt="image-20230427165216029"></p>
<p>在   <strong>App.vue</strong>  文件中，把下面的代码替换里面所有的代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>在 <strong>main.js</strong>  文件中删除红框中的代码</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230427165518598.png" alt="image-20230427165518598"></p>
<p>重新将项目跑起来，如果页面显示hello说明启动成功了！</p>
<h2 id="二、导入SuperMap-iClient-for-leaflet-SDK"><a href="#二、导入SuperMap-iClient-for-leaflet-SDK" class="headerlink" title="二、导入SuperMap iClient for leaflet SDK"></a>二、导入SuperMap iClient for leaflet SDK</h2><p>1.找到SuperMap iClient <a href="https://iclient.supermap.io/">官网</a>，对应的开发插件，每年api都会有更新，建议直接百度搜索SuperMap iClient可以看到最新的版本</p>
<p>2.安装官网的流程，使用 npm包引入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install @supermap/iclient-leaflet</span><br></pre></td></tr></table></figure>

<p>然后在项目中的index.html文件中引入样式</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://unpkg.com/leaflet@1.7.1/dist/leaflet.css&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;https://iclient.supermap.io/dist/leaflet/iclient-leaflet.min.css&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230427170502534.png" alt="image-20230427170502534"></p>
<p>3.在App.vue中输入下面的代码，然后重新启动项目</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> L <span class="keyword">from</span> <span class="string">&quot;leaflet&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">TiledMapLayer</span> &#125; <span class="keyword">from</span> <span class="string">&quot;@supermap/iclient-leaflet&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">initMap</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> url =</span><br><span class="line">    <span class="string">&quot;https://iserver.supermap.io/iserver/services/map-world/rest/maps/World&quot;</span>;</span><br><span class="line">  <span class="comment">// 初始化地图信息</span></span><br><span class="line">  <span class="keyword">var</span> map = L.<span class="title function_">map</span>(<span class="string">&quot;map&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">crs</span>: L.<span class="property">CRS</span>.<span class="property">EPSG4326</span>,</span><br><span class="line">    <span class="attr">center</span>: [<span class="number">0</span>, <span class="number">0</span>],</span><br><span class="line">    <span class="attr">maxZoom</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">zoom</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">new</span> <span class="title class_">TiledMapLayer</span>(url).<span class="title function_">addTo</span>(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">initMap</span>();</span><br><span class="line">&#125;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;map&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span><span class="language-css"></span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-tag">html</span>,</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-tag">body</span>,</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"><span class="selector-id">#map</span> &#123;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">position</span>: absolute;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">height</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">width</span>: <span class="number">100%</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">  <span class="attribute">margin</span>: <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-css"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.一般来说这里，vite构建的项目会不兼容nodejs的内部模块，所以还需要配置 <strong>vite.config.js</strong>文件，<a href="https://github.com/sodatea/vite-plugin-node-stdlib-browser">参考</a>,使用npm下载对应的软件包。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install node-stdlib-browser</span><br><span class="line">npm install vite-plugin-node-stdlib-browser</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// vite.config.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&#x27;vite&#x27;</span></span><br><span class="line"><span class="keyword">import</span> nodePolyfills <span class="keyword">from</span> <span class="string">&#x27;vite-plugin-node-stdlib-browser&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="title function_">nodePolyfills</span>()]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>5.配置完这一步，就可以运行执行项目得到如下的结果：</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230513205947582.png" alt="image-20230513205947582"></p>
]]></content>
  </entry>
  <entry>
    <title>Vue3基础</title>
    <url>/2023/04/15/Vue3%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230415231055729.png" alt="image-20230415231055729"></p>
<span id="more"></span>

<h1 id="使用Vue创建项目"><a href="#使用Vue创建项目" class="headerlink" title="使用Vue创建项目"></a>使用Vue创建项目</h1><p>1.首先cd到工作目录当中，然后使用下面的语句，搭建Vue的开发框架</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm create vue</span><br></pre></td></tr></table></figure>

<p>2.然后根据项目需要选择对应模块，我这边作为熟悉项目框架，所以都选择了no</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230416000823071.png" alt="image-20230416000823071"></p>
<p>3.这时已经创建好了一个项目，但是环境还没进行安装，所以还需要使用下面的指令，对环境进行安装，并将项目跑起来</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动项目</span></span><br><span class="line">npm run dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.我们删除其他页面，并新建一个App.vue页面，并对页面进行简单编辑与显示</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230416003556697.png" alt="image-20230416003556697"></p>
<hr>
<h1 id="Vue基础知识"><a href="#Vue基础知识" class="headerlink" title="Vue基础知识"></a>Vue基础知识</h1><h2 id="main-js中的概念"><a href="#main-js中的概念" class="headerlink" title="main.js中的概念"></a>main.js中的概念</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	App.vue是根组件</span></span><br><span class="line"><span class="comment">		- CreateApp(App)：将根组件关联到应用上</span></span><br><span class="line"><span class="comment">			- 会返回一个应用的实例</span></span><br><span class="line"><span class="comment">		- app.mount(&#x27;#app&#x27;)：将应用挂载到页面中</span></span><br><span class="line"><span class="comment">			- 会返回一个根组件的实例，组件的实例通常命名为vm</span></span><br><span class="line"><span class="comment">			- 组件实例是一个Proxy()对象（代理对象）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="keyword">const</span> vm = app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="组件中的方法：methods"><a href="#组件中的方法：methods" class="headerlink" title="组件中的方法：methods"></a>组件中的方法：methods</h2><p><strong>methods</strong> 用来指定实例对象中的方法</p>
<ul>
<li>它是一个<strong>对象</strong>，可以在它里面定义多个方法</li>
<li>这些方法最终会被挂载到组件实例上</li>
<li>可以直接通过组件实例来调用这些方法</li>
<li>methods 中函数的<strong>this会被自动绑定为组件实例</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)   <span class="comment">//组件实例， vm</span></span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;实例对象的方法&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">changeMsg</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">msg</span> = <span class="string">&quot;新的消息！&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeMsg&quot;</span>&gt;</span>点我一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="组件中的计算属性：computed"><a href="#组件中的计算属性：computed" class="headerlink" title="组件中的计算属性：computed"></a>组件中的计算属性：computed</h2><p><strong>computed</strong> 用来指定计算属性</p>
<p>在计算属性getter中，尽量<strong>只做读取</strong>相关的逻辑，不要执行哪些会产生（副）作用的代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    属性名：getter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>计算属性，只在其依赖的数据发生变化时才会重新执行</li>
<li><strong>会对数据进行缓存</strong></li>
<li>可以为计算属性设置setter，使得计算属性可写，但是<strong>不建议这样做</strong></li>
</ul>
<h2 id="组合式API（setup）"><a href="#组合式API（setup）" class="headerlink" title="组合式API（setup）"></a>组合式API（setup）</h2><p>组合式API（setup）一般都是放在script标签内部</p>
<ul>
<li>使用组合式API，我们可以在script中直接定义变量和函数</li>
<li>使用组合式API直接<strong>定义的变量就是一个普通变量，不是响应式变量</strong></li>
<li>通过<strong>reactive函数</strong>可以在setup中<strong>创建一个响应式对象</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line">    <span class="keyword">const</span> msg = <span class="string">&quot;组合式API&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建响应式变量</span></span><br><span class="line">    <span class="keyword">const</span> stu = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;原&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="响应式代理"><a href="#响应式代理" class="headerlink" title="响应式代理"></a>响应式代理</h2><p><strong>reactive()</strong></p>
<ul>
<li>返回一个<strong>对象</strong>的响应式代码</li>
<li>返回的是一个深层响应式对象</li>
<li>也可以使用shallowReactive()创建一个浅层响应式对象</li>
<li>缺点：<strong>只能返回对象的响应式代理！不能处理原始值</strong></li>
</ul>
<p><strong>ref()</strong></p>
<ul>
<li>接受一个任意值，并返回它的响应式代理</li>
<li><strong>访问ref对象</strong>时，必须通过 <strong>对象.value</strong>  来访问其中的值</li>
<li>在模板中，ref对象会被<strong>自动解包</strong>，不需要使用 对象.value.属性名，直接使用 <strong>对象.属性名</strong> 就可以直接访问</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123; reactive,ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line">    <span class="keyword">const</span> msg = <span class="string">&quot;组合式API&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建响应式变量</span></span><br><span class="line">    <span class="keyword">const</span> stu = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;原&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//ref在生成响应式代理时，它是将值包装成了一个对象  0  ---&gt; &#123;value:0&#125;</span></span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)     <span class="comment">//生成一个0的响应式代理                                                                        </span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="v-bind-标签动态属性设置"><a href="#v-bind-标签动态属性设置" class="headerlink" title="v-bind 标签动态属性设置"></a>v-bind 标签动态属性设置</h2><p>对标签的属性进行动态设置时，需要使用到 v-bind 指令，</p>
<p>v-bind可以简写为  <strong>：</strong></p>
<p>当我们为一个布尔值设置属性时，如果为<strong>true</strong>则表示元素上<strong>有该属性</strong>，如果为<strong>false</strong>，则元素上<strong>没有该属性</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">const</span> imgPath = <span class="title function_">ref</span>(<span class="string">&quot;/images/messi.png&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeImg</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    imgPath.<span class="property">value</span> = <span class="string">&quot;/images/neymar.png&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> attrs = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&quot;box1&quot;</span>,</span><br><span class="line">    <span class="attr">class</span>: <span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> attrName = <span class="string">&quot;title&quot;</span></span><br><span class="line"><span class="keyword">const</span> attrValue = <span class="string">&quot;这是一个title属性&quot;</span></span><br><span class="line"><span class="keyword">const</span> isDisabled = <span class="string">&quot;&quot;</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- &lt;button @click=&quot;changeImg&quot;&gt;切换图片&lt;/button&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:</span>[<span class="attr">attrName</span>]=<span class="string">&quot;attrValue&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;imgPath&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;梅西&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">    //绑定属性组</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:</span>=<span class="string">&quot;attrs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;isDisabled&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="样式设置"><a href="#样式设置" class="headerlink" title="样式设置"></a>样式设置</h2><p>可以直接通过<strong>style标签</strong>来编写样式，<br>如果直接通过style标签写样式，此时编写的样式是<strong>全局样式</strong>会影响到所有的组件</p>
<p>可以为<strong>style标签添加一个scoped属性</strong>，<br>  这样样式将成为<strong>局部样式</strong>，只对当前组件生效<br>如何实现的？</p>
<ul>
<li><p>当我们在组件中使用scoped样式时，<br>vue会自动为组件中的所有元素生成一个随机的属性<br>形如：data-v-7a7a37b1<br>生成后，所有的选择器都会在最后添加一个 [data-v-7a7a37b1]<br>  h1 -&gt; h1[data-v-7a7a37b1]<br>  .box1 -&gt; .box1[data-v-7a7a37b1]</p>
</li>
<li><p>注意：</p>
<p>  随机生成的属性，除了会添加到当前组件内的所有元素上，<br>  也会添加到当前组件引入的其他组件的<strong>根元素</strong>上，这样设计<br>  是为了，可以通过父组件来为子组件设置一些样式.</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">h1 &#123;</span><br><span class="line">    background-<span class="attr">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">box1</span> &#123;</span><br><span class="line">    <span class="attr">width</span>: 200px;</span><br><span class="line">    <span class="attr">height</span>: 200px;</span><br><span class="line">    background-<span class="attr">color</span>: #bfa;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">将组件中所有的 h2的字体颜色设置为黄色 </span></span><br><span class="line"><span class="comment">.app h2 --&gt; .app h2[xxxxx]</span></span><br><span class="line"><span class="comment">.app h2[data-v-7a7a37b1] 没用deep</span></span><br><span class="line"><span class="comment">.app[data-v-7a7a37b1] h2 用了deep</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">.<span class="property">app</span> :<span class="title function_">deep</span>(<span class="params">h2</span>) &#123;</span><br><span class="line">    <span class="attr">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  :global() 全局选择器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">:<span class="title function_">global</span>(<span class="params">div</span>) &#123;</span><br><span class="line">    <span class="attr">border</span>: 1px red solid;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>style 表情内部也已设置全局样式（global()），这样就能全局生效了</p>
<hr>
<h2 id="练习：使用Vue搭建小网页"><a href="#练习：使用Vue搭建小网页" class="headerlink" title="练习：使用Vue搭建小网页"></a>练习：使用Vue搭建小网页</h2><hr>
<h2 id="父组件通过-props-将数据传递给子组件"><a href="#父组件通过-props-将数据传递给子组件" class="headerlink" title="父组件通过 props 将数据传递给子组件"></a>父组件通过 props 将数据传递给子组件</h2><p>使用props</p>
<ul>
<li>先在子组件中定义props</li>
<li>定义属性名要遵循<strong>驼峰命名法</strong></li>
</ul>
<p>注意：<strong>使用props</strong>传递的数据是<strong>单向的</strong>,子组件是<strong>无法修改</strong>父组件传递的数据</p>
<p><strong>子组件</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">    <span class="comment">// 定义一个props</span></span><br><span class="line">    <span class="keyword">const</span> props = <span class="title function_">defineProps</span>([<span class="string">&#x27;item&#x27;</span>])</span><br><span class="line">    <span class="keyword">const</span> item = props.<span class="property">item</span></span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><strong>父组件</strong>传递信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">TabItem</span> <span class="keyword">from</span> <span class="string">&quot;./components/TabItem.vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义传入的属性信息</span></span><br><span class="line"><span class="keyword">const</span> player = <span class="title function_">ref</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;梅西&#x27;</span>,</span><br><span class="line">  <span class="attr">img</span>:<span class="string">&#x27;./images/messi.png&#x27;</span>,</span><br><span class="line">  <span class="attr">rate</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">hot</span>:<span class="number">433760</span></span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		// 通过使用 :子组件定义的传递属性 来动态绑定数据</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">TabItem</span> <span class="attr">:item</span>=<span class="string">&quot;player&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">TabItem</span>&gt;</span>&gt;</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="v-show-、v-if-切换显示"><a href="#v-show-、v-if-切换显示" class="headerlink" title="v-show 、v-if 切换显示"></a>v-show 、v-if 切换显示</h2><p><strong>v-show</strong> 可以根据值来决定元素是否显示（通过display来切换元素的显示状态）</p>
<p><strong>v-if</strong> 可以根据表达式的值来决定是否显示元素（会<strong>直接将元素删除</strong>）</p>
<ul>
<li><strong>v-show</strong>通过css来切换组件的显示与否，切换时不会涉及到组件的重新渲染切换的性能比较高。</li>
<li>但是初始化时，需要对所有组件进行初始化（即使组件暂时不显示）所以它的初始化的性能要差一些！</li>
<li><strong>v-if</strong> 通过删除添加元素的方式来切换元素的显示，切换时反复的渲染组件，切换的性能比较差。</li>
<li><strong>v-if</strong> 只会初始化需要用到的组件，所以它的<strong>初始化性能比较好</strong></li>
<li>v-if可以和 v-else-if 和 v-else结合使用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;button @click=<span class="string">&quot;isShow = !isShow&quot;</span>&gt;切换&lt;/button&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-show</span>=<span class="string">&quot;isShow&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>显示<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h2><p>Vue自带的组件标签，不需要引入：**<component></component>**</p>
<p>通过这个组件我们可以改变 <strong>is</strong> 后面的标签来改变组件，当然is后面也可以是<strong>用户的自定义组件</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">component</span> <span class="attr">is</span>=<span class="string">&#x27;标签名&#x27;</span>&gt;</span>我是动态组件<span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">component</span> <span class="attr">is</span>=<span class="string">&#x27;div&#x27;</span>&gt;</span>我是动态组件<span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">component</span> <span class="attr">is</span>=<span class="string">&#x27;h1&#x27;</span>&gt;</span>我是动态组件<span class="tag">&lt;/<span class="name">component</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h2 id="v-for"><a href="#v-for" class="headerlink" title="v-for"></a>v-for</h2><p>这就是一个循环遍历的效果，它在哪个组件上面，该组件就会根据数据进行生成,</p>
<p>它在生成的时候是<strong>按顺序生成的</strong>，所以你在修改的时候他会发生改变</p>
<p>在使用v-for时，可以为元素指定一个<strong>唯一的key</strong></p>
<p>有了key之后，元素再比较时就会<strong>按照相同的key</strong>去比较而不是顺序</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//id时item中的一个属性</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">&quot;item in arr&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        &#123;&#123; item &#125;&#125;</span></span><br><span class="line"><span class="language-xml">     <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h2 id="插槽"><a href="#插槽" class="headerlink" title="插槽"></a>插槽</h2><p>希望在父组件中指定子组件中的内容</p>
<ul>
<li>我们可以通过插槽（slot）来实现该需求</li>
<li>通过插槽引入组件，位于父组件的作用域中</li>
</ul>
<p>具名插槽</p>
<ul>
<li>入口：v-slot:name</li>
<li>在插槽定义的时候要给一个name属性：&lt;slot name:”aa”&gt;</slot></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyButton</span> <span class="keyword">from</span> <span class="string">&quot;./components/MyButton.vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">&quot;./components/A.vue&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">MyWrapper</span> <span class="keyword">from</span> <span class="string">&quot;./components/MyWrapper.vue&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;孙悟空&quot;</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>App组件<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- </span></span></span><br><span class="line"><span class="comment"><span class="language-xml">        希望在父组件中指定子组件中的内容</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">            - 我们可以通过插槽（slot）来实现该需求</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">        &lt;MyButton&gt;插槽的入口&lt;/MyButton&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml"></span></span></span><br><span class="line"><span class="comment"><span class="language-xml">        &lt;button&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">            &lt;slot&gt;&lt;/slot&gt;  插槽的出口</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">        &lt;/button&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml"></span></span></span><br><span class="line"><span class="comment"><span class="language-xml">        通过插槽引入组件，位于父组件的作用域中</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">    --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- &lt;MyButton&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">        &lt;A :name=&quot;name&quot;&gt;&lt;/A&gt;</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">    &lt;/MyButton&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">MyWrapper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- 具名插槽的入口 --&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-slot:aa</span>&gt;</span>一级标题<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> #<span class="attr">bb</span>&gt;</span>二级标题<span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">MyWrapper</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="状态管理（state）"><a href="#状态管理（state）" class="headerlink" title="状态管理（state）"></a>状态管理（state）</h2><p>状态管理</p>
<ul>
<li><p><strong>状态</strong>（state）</p>
<ul>
<li>应用当中的数据就是状态</li>
<li>状态即数据</li>
</ul>
</li>
<li><p><strong>视图</strong>（view）</p>
<ul>
<li>视图用来呈现数据，用户通过视图访问数据</li>
</ul>
</li>
<li><p><strong>交互</strong>（actions）</p>
<ul>
<li><p>用户的操作</p>
</li>
<li><p>状态会根据用户在视图中的操作发生变化</p>
</li>
</ul>
</li>
<li><p><strong>提升状态</strong></p>
<pre><code>    - 当有多个组件需要使用到同一个state时，可以将state提升到这些组件共同的祖先组件中声明
        这样一来所有这些组件便都可以通过祖先元素来访问到这个state；（通过父组件进行==provide==，子组件使用==inject()==来接受来自父组件的数据）
</code></pre>
</li>
</ul>
<h2 id="Pinia"><a href="#Pinia" class="headerlink" title="Pinia"></a>Pinia</h2><p>Vue中的官方状态管理库相对于store，用Pinia进行管理更能规范化</p>
<p>Pinia的安装<strong>查看官方文档即可</strong></p>
<p><strong>store实例本身就是一个reactive对象</strong></p>
<ul>
<li>可以通过它直接访问state中的数据</li>
<li>但是如果直接将state中数据解构出来，那么数据将会丧失响应性</li>
</ul>
<p><strong>可以通过storeToRefs()来对store进行解构</strong></p>
<ul>
<li>它可以将state和getters中的属性解构为ref属性，从而保留其响应性</li>
</ul>
<p> state的修改</p>
<p>store订阅</p>
<p><strong>$onAction 用来订阅action的调用</strong></p>
<p>返回值：</p>
<p>·1.name 调用的action的名字</p>
<p>2.store store的实例</p>
<p>3.args action接收到的参数</p>
<p>4.after() 可以设置一个回调函数，函数会在action成功调用后触发</p>
<p>5.onError() 可以设置一个回调函数，函数会在action调用失败后触发</p>
<hr>
<hr>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref, inject &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="comment">// import &#123; countStore &#125; from &quot;../store/count&quot;</span></span><br><span class="line"><span class="comment">// const &#123; count, increment &#125; = inject(&quot;count&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; useStudentStore &#125; <span class="keyword">from</span> <span class="string">&quot;@/store/studentStore.js&quot;</span></span><br><span class="line"><span class="keyword">import</span> &#123; storeToRefs &#125; <span class="keyword">from</span> <span class="string">&quot;pinia&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> stuStore = <span class="title function_">useStudentStore</span>()</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    store实例本身就是一个reactive对象，</span></span><br><span class="line"><span class="comment">        可以通过它直接访问state中的数据</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    但是如果直接将state中数据解构出来，那么数据将会丧失响应性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    可以通过storeToRefs()来对store进行解构，</span></span><br><span class="line"><span class="comment">        它可以将state和getters中的属性解构为ref属性，从而保留其响应性</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    state的修改：</span></span><br><span class="line"><span class="comment">        1. 直接修改</span></span><br><span class="line"><span class="comment">        2. 通过$patch</span></span><br><span class="line"><span class="comment">        3. 通过$patch传函数的形式的修改</span></span><br><span class="line"><span class="comment">        4. 直接替换state</span></span><br><span class="line"><span class="comment">        5. 重置state</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">// const &#123; name, age &#125; = stuStore</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; name, age, title &#125; = <span class="title function_">storeToRefs</span>(stuStore)</span><br><span class="line"></span><br><span class="line"><span class="comment">// state中的属性（方法），都可以通过store对象直接访问</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">clickHandler</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    stuStore.$patch(&#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;孙小圣&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="number">20</span>,</span><br><span class="line">        <span class="attr">skills</span>: [<span class="string">&quot;救命毫毛&quot;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// stuStore.$patch((state) =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     state.skills.push(&quot;救命毫毛&quot;)</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// stuStore.skills.push(&quot;哈哈&quot;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// stuStore.$patch(&#123; name: &quot;孙小圣&quot; &#125;)</span></span><br><span class="line">    <span class="comment">// stuStore.$state = &#123; name: &quot;孙小圣&quot; &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">    store的订阅</span></span><br><span class="line"><span class="comment">        - 当store中的state发生变化时，做一些响应的操作</span></span><br><span class="line"><span class="comment">        - store.$subscribe(函数, 配置对象)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">stuStore.$subscribe(</span><br><span class="line">    <span class="function">(<span class="params">mutation, state</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// mutation 表示修改的信息</span></span><br><span class="line">        <span class="comment">// console.log(mutation.events)</span></span><br><span class="line">        <span class="comment">// console.log(mutation.events[0] === mutation.events[1])</span></span><br><span class="line">        <span class="comment">// console.log(mutation.payload)</span></span><br><span class="line">        <span class="comment">// if(state.token)&#123;</span></span><br><span class="line">        <span class="comment">//     // 登录，向本地存储中添加内容</span></span><br><span class="line">        <span class="comment">// &#125;else&#123;</span></span><br><span class="line">        <span class="comment">//     // 登出，从本地存储中移除内容</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// console.log(&quot;state发生变化了&quot;, state)</span></span><br><span class="line">        <span class="comment">// 使用订阅时不要在回调函数中直接修改state</span></span><br><span class="line">        <span class="comment">// state.age++</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; <span class="attr">detached</span>: <span class="literal">true</span> &#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// $onAction 用来订阅action的调用</span></span><br><span class="line">stuStore.$onAction(<span class="function">(<span class="params">&#123; name, store, args, after, onError &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/* </span></span><br><span class="line"><span class="comment">        name 调用的action的名字</span></span><br><span class="line"><span class="comment">        store store的实例</span></span><br><span class="line"><span class="comment">        args action接收到的参数</span></span><br><span class="line"><span class="comment">        after() 可以设置一个回调函数，函数会在action成功调用后触发</span></span><br><span class="line"><span class="comment">        onError() 可以设置一个回调函数，函数会在action调用失败后触发</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">after</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name + <span class="string">&quot;成功执行！&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">onError</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(name + <span class="string">&quot;执行失败！&quot;</span>, err)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        ComponentC -- &#123;&#123; name &#125;&#125; -- &#123;&#123; age &#125;&#125; -- &#123;&#123; title &#125;&#125; --</span></span><br><span class="line"><span class="language-xml">        &#123;&#123; stuStore.double &#125;&#125; --</span></span><br><span class="line"><span class="language-xml">        &#123;&#123; stuStore.skills &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="comment">&lt;!-- &#123;&#123; countStore.count &#125;&#125; --</span></span></span><br><span class="line"><span class="comment"><span class="language-xml">        &lt;button @click=&quot;countStore.increment&quot;&gt;按钮&lt;/button&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;stuStore.growUp&quot;</span>&gt;</span>长大<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">hr</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;stuStore.name = &#x27;孙大圣&#x27;&quot;</span>&gt;</span>修改name<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;clickHandler&quot;</span>&gt;</span>patch修改<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;stuStore.$reset()&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="前端和后端交互（ajax）"><a href="#前端和后端交互（ajax）" class="headerlink" title="前端和后端交互（ajax）"></a>前端和后端交互（ajax）</h2><p>因为用的是Vue，所以我们使用了 <strong>axios</strong>  ，这个就是对&#x3D;&#x3D;ajax&#x3D;&#x3D;的再次封装产生的</p>
<p>1.使用npm 包引入 axios</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install axios --save</span><br></pre></td></tr></table></figure>

<p>2.在&#x3D;&#x3D;src&#x3D;&#x3D;目录下新建一个 &#x3D;&#x3D;axios.js&#x3D;&#x3D;,用来创建axios实例,这样方便配置信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>:<span class="string">&#x27;http://localhost:3001/&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure>

<p>3.在 <strong>src</strong> 中新建一个api文件夹，在内部编写需要调用api的方法，我在<strong>api</strong>文件夹中新建了一个 &#x3D;&#x3D;manager.js&#x3D;&#x3D;,并在内部写方法</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230426090335263.png" alt="image-20230426090335263"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;../axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//请求用户信息API</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getUsers</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/get&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新建用户API</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">creatUser</span>(<span class="params">name,psw,phone,email</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/user/insert&#x27;</span>,&#123;</span><br><span class="line">        name,</span><br><span class="line">        psw,</span><br><span class="line">        phone,</span><br><span class="line">        email</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>4.然后在需要使用这个API的页面导入方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; getUsers, creatUser &#125; <span class="keyword">from</span> <span class="string">&#x27;./api/manager&#x27;</span></span><br></pre></td></tr></table></figure>

<p>5.现在调用这个方法会报错，遇到&#x3D;&#x3D;跨域问题&#x3D;&#x3D;，解决方法有两种，一种在后端解决，一种在前端解决</p>
<p><strong>后端解决方法</strong>：&#x3D;&#x3D;在index.js&#x3D;&#x3D;文件中添加下面代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//跨域问题解决方面</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>,<span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);<span class="comment">//仅支持配置一个域名</span></span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;PUT, POST, GET, DELETE, OPTIONS&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>,<span class="literal">true</span>)<span class="comment">//允许客户端携带验证信息</span></span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>index.js完整代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//跨域问题解决方面</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>,<span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);<span class="comment">//仅支持配置一个域名</span></span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;PUT, POST, GET, DELETE, OPTIONS&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>,<span class="literal">true</span>)<span class="comment">//允许客户端携带验证信息</span></span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入自定义的接口文件</span></span><br><span class="line"><span class="keyword">let</span> user = <span class="built_in">require</span>(<span class="string">&#x27;./routers/user&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> home = <span class="built_in">require</span>(<span class="string">&#x27;./routers/home&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义接口</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>,home);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/user&#x27;</span>,user);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3001</span>);</span><br></pre></td></tr></table></figure>

<p><strong>前端解决方案</strong>：修改配置文件中代理文件中的内容，在Vue中是修改<strong>vite.config.js</strong></p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230426095212856.png" alt="image-20230426095212856"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; defineConfig &#125; <span class="keyword">from</span> <span class="string">&quot;vite&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="comment">//配置代理服务，将 http://localhost:3001代理为 /api</span></span><br><span class="line">  <span class="attr">server</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://localhost:3001&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">rewrite</span>: <span class="function">(<span class="params">path</span>) =&gt;</span> path.<span class="title function_">replace</span>(<span class="regexp">/^\/api/</span>, <span class="string">&quot;&quot;</span>),</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后还需要将&#x3D;&#x3D;axios.js&#x3D;&#x3D;中的 <strong>baseurl</strong> 改为 &#x3D;&#x3D;&#x2F;api&#x3D;&#x3D; 即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">baseURL</span>:<span class="string">&#x27;/api&#x27;</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;如何将数据传递给后端&#x3D;&#x3D;</p>
<p>1.如果是<strong>get请求</strong>，则可以在后端使用 <strong>res.query.传入的参数</strong>   进行获取，具体代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/get&#x27;</span>,<span class="keyword">function</span>(<span class="params">req,res</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> client =  <span class="keyword">new</span> pg.<span class="title class_">Client</span>(conString);</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 获取传入的数据</span></span><br><span class="line">    <span class="keyword">let</span> name = req.<span class="property">query</span>.<span class="property">name</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//sql语句</span></span><br><span class="line">    selectSQLString = <span class="string">&quot;SELECT * FROM test where name like $1&quot;</span>;</span><br><span class="line">    <span class="comment">//客户端连接，进行数据插入</span></span><br><span class="line">    client.<span class="title function_">connect</span>(<span class="keyword">function</span>(<span class="params">error, results</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (error) &#123;</span><br><span class="line">            <span class="comment">// console.log(&#x27;clientConnectionReady Error:&#x27;+error.message);</span></span><br><span class="line">            res.<span class="title function_">send</span>(&#123;</span><br><span class="line">                <span class="attr">status</span>:<span class="string">&#x27;fail&#x27;</span>,</span><br><span class="line">                <span class="attr">msg</span>:error.<span class="property">message</span></span><br><span class="line">            &#125;)</span><br><span class="line">            client.<span class="title function_">end</span>();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;connection success...\n&#x27;</span>);</span><br><span class="line">        client.<span class="title function_">query</span>(selectSQLString,[name],<span class="keyword">function</span>(<span class="params">error,results</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(error)&#123;</span><br><span class="line">                <span class="comment">// console.log(error.message);</span></span><br><span class="line">                res.<span class="title function_">send</span>(&#123;</span><br><span class="line">                    <span class="attr">status</span>:<span class="string">&#x27;fail&#x27;</span>,</span><br><span class="line">                    <span class="attr">msg</span>:error.<span class="property">message</span></span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">// console.log(results.rows);</span></span><br><span class="line">                res.<span class="title function_">send</span>(&#123;</span><br><span class="line">                    <span class="attr">status</span>:<span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">                    <span class="attr">msg</span>:results.<span class="property">rows</span></span><br><span class="line">                &#125;)</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">            client.<span class="title function_">end</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>前端&#x3D;&#x3D;get请求&#x3D;&#x3D;的方式：<strong>一定要加上一个params对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getUsers</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/user/get&#x27;</span>,&#123;</span><br><span class="line">        <span class="attr">params</span>: &#123;</span><br><span class="line">            name</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>2.如果是 <strong>post</strong>  请求，则需要在后端安装一个插件：body-parser</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install body-parser --save</span><br></pre></td></tr></table></figure>

<p>然后再&#x3D;&#x3D;index.js&#x3D;&#x3D;文件中配置body-parser环境,整体代码如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析前端传入的参数配置</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;</span><br><span class="line">    <span class="attr">extended</span>:<span class="literal">true</span></span><br><span class="line">&#125;));</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//跨域问题解决方面</span></span><br><span class="line">app.<span class="title function_">all</span>(<span class="string">&#x27;*&#x27;</span>,<span class="keyword">function</span> (<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span>, <span class="string">&#x27;*&#x27;</span>);<span class="comment">//仅支持配置一个域名</span></span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Headers&#x27;</span>, <span class="string">&#x27;Content-Type, Content-Length, Authorization, Accept, X-Requested-With , yourHeaderFeild&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span>, <span class="string">&#x27;PUT, POST, GET, DELETE, OPTIONS&#x27;</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(<span class="string">&#x27;Access-Control-Allow-Credentials&#x27;</span>,<span class="literal">true</span>)<span class="comment">//允许客户端携带验证信息</span></span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//引入自定义的接口文件</span></span><br><span class="line"><span class="keyword">let</span> user = <span class="built_in">require</span>(<span class="string">&#x27;./routers/user&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> home = <span class="built_in">require</span>(<span class="string">&#x27;./routers/home&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用自定义接口</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/&#x27;</span>,home);</span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&#x27;/user&#x27;</span>,user);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">3001</span>);</span><br></pre></td></tr></table></figure>

<p>在需要使用参数的文件内, <strong>.body.属性名</strong>获取数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = req.<span class="property">body</span>.<span class="property">name</span>;</span><br><span class="line"><span class="keyword">let</span> psw = req.<span class="property">body</span>.<span class="property">psw</span>;</span><br><span class="line"><span class="keyword">let</span> phone = req.<span class="property">body</span>.<span class="property">phone</span>;</span><br><span class="line"><span class="keyword">let</span> email = req.<span class="property">body</span>.<span class="property">email</span>;</span><br></pre></td></tr></table></figure>



















]]></content>
  </entry>
</search>
