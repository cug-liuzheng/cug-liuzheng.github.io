<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Vm虚拟机</title>
    <url>/2023/04/18/Vm%E8%99%9A%E6%8B%9F%E6%9C%BA/</url>
    <content><![CDATA[<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230418144031049.png" alt="image-20230418144031049"></p>
<span id="more"></span>

<h2 id="VM下设置与主机共享文件夹"><a href="#VM下设置与主机共享文件夹" class="headerlink" title="VM下设置与主机共享文件夹"></a>VM下设置与主机共享文件夹</h2><p>1.关闭虚拟机，点击<strong>编辑虚拟机设置</strong>–&gt;<strong>选项</strong>–&gt;<strong>共享文件夹</strong>–&gt;选择主机需要共享的文件夹</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230418141612587.png" alt="image-20230418141612587"></p>
<p>2.启动虚拟机，进入root权限输入下面的指令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install open-vm-tools</span><br><span class="line"></span><br><span class="line">mkdir /mnt/hgfs</span><br><span class="line"></span><br><span class="line">/usr/bin/vmhgfs-fuse .host:/ /mnt/hgfs -o subtype=vmhgfs-fuse,allow_other</span><br></pre></td></tr></table></figure>

<p>3.输出这三行指令后，在主界面的 mnt&#x2F;hgfs&#x2F;  文件夹下可以找到共享的文件夹</p>
<p><a href="https://superuser.com/questions/588304/no-mnt-hgfs-in-ubuntu-guest-under-vmware-fusion">参考网址</a></p>
<hr>
<h2 id="VM下设置root账户登录"><a href="#VM下设置root账户登录" class="headerlink" title="VM下设置root账户登录"></a>VM下设置root账户登录</h2><p>1.为root账户设置密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd  root</span><br></pre></td></tr></table></figure>

<p>2.测试登录root账号，登录成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su root    //登录root账号</span><br></pre></td></tr></table></figure>

<p>3.修改50-ubuntu.conf配置文件内容，文件路径：&#x2F;usr&#x2F;share&#x2F;lightdm&#x2F;lightdm.conf.d&#x2F;50-ubuntu.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//修改文件权限</span><br><span class="line">chmod  777  /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf</span><br><span class="line"></span><br><span class="line">//打开文件修改内容</span><br><span class="line">gedit  /usr/share/lightdm/lightdm.conf.d/50-ubuntu.conf</span><br></pre></td></tr></table></figure>

<p>在打开的文档里面加上下面的代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">greeter-show-manual-login=true</span><br><span class="line">all-guest=false</span><br></pre></td></tr></table></figure>

<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230418142019624.png" alt="image-20230418142019624"></p>
<p>4.修改<strong>gdm-autologin和gdm-passwd</strong>文件，文件路径：&#x2F;etc&#x2F;pam.d</p>
<p>打开两个文件 注释掉 <strong>auth required pam_success_if.so user!&#x3D;root quiet_success</strong>这一行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//修改文件权限</span><br><span class="line">sudo  chmod  777 /etc/pam.d/gdm-autologin</span><br><span class="line">sudo  chmod  777 /etc/pam.d/gdm-password</span><br><span class="line"></span><br><span class="line">//编辑文件</span><br><span class="line">gedit /etc/pam.d/gdm-autologin</span><br><span class="line">gedit /etc/pam.d/gdm-password </span><br></pre></td></tr></table></figure>

<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230418142122470.png" alt="image-20230418142122470"></p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230418142127056.png" alt="image-20230418142127056"></p>
<p>5.修改**&#x2F;root&#x2F;.profile**文件</p>
<p>编辑该配置文件，在最后最后一行，加上  <strong>tty -s&amp;&amp;mesg n || true</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gedit /root/.profile</span><br></pre></td></tr></table></figure>

<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230418142225510.png" alt="image-20230418142225510"></p>
<p>6.重启虚拟机，选择其他账户，输入root用户名和密码即可登录</p>
<hr>
<h2 id="Linux下安装QT"><a href="#Linux下安装QT" class="headerlink" title="Linux下安装QT"></a>Linux下安装QT</h2><p>1.下载QT</p>
<p>进入<a href="https://download.qt.io/archive/qt/">QT</a>官网下载需要的版本</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230418142905209.png" alt="image-20230418142905209"></p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230418142914325.png" alt="image-20230418142914325"></p>
<p>2.打开Linux系统，在安装前对环境进行配置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//更新apt源</span><br><span class="line">apt update</span><br><span class="line"></span><br><span class="line">//安装gcc </span><br><span class="line">apt install gcc</span><br><span class="line">apt install g++</span><br><span class="line"></span><br><span class="line">//安装make</span><br><span class="line">apt -y install gcc automake autoconf libtool make</span><br><span class="line"></span><br><span class="line">//安装openGL库</span><br><span class="line">apt install mesa*</span><br><span class="line">apt install freeglut*</span><br></pre></td></tr></table></figure>

<p>3.找到下载QT的安装包位置，输入下面的指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 设置安装包的权限</span><br><span class="line">chmod 777 qt-opensource-linux-x64-5.14.2.run</span><br><span class="line"></span><br><span class="line">//进行安装</span><br><span class="line">./qt-opensource-linux-x64-5.14.2.run</span><br></pre></td></tr></table></figure>

<p>4.关闭网络进行QT安装</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230418143059927.png" alt="image-20230418143059927"></p>
<p>5.安装默认一直点next，如果中间发生闪退的原因就<strong>重新安装其他版本</strong></p>
<p>6.配置qt环境变量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//修改配置文件</span><br><span class="line">gedit /etc/profile</span><br></pre></td></tr></table></figure>

<p>在<strong>文件尾部加入环境变量</strong>，注意这里加入两条路径，一个是gcc或者gcc_64下的bin目录，一个是&#x2F;Tools&#x2F;QtCreator下的bin目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//其中Qt的路径和自己安装的Qt版本有关</span><br><span class="line">export PATH=/opt/Qt5.14.2/5.14.2/gcc_64/bin:$PATH</span><br><span class="line">export PATH=/opt/Qt5.14.2/Tools/QtCreator/bin:$PATH</span><br></pre></td></tr></table></figure>

<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230418143303887.png" alt="image-20230418143303887"></p>
<p>7.重新加载环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">//重新加载环境变量</span><br><span class="line">source /etc/profile</span><br><span class="line"></span><br><span class="line">//测试环境变量是否配置成果，输入下面指令，正常来说是可以启动QT的</span><br><span class="line">// 如果没有启动说明环境变量没有配置成果</span><br><span class="line">qtcreator</span><br></pre></td></tr></table></figure>

<p>8.确认gcc和g++的版本,要保证gcc和g++与<strong>其他共同使用的人的一致</strong>，不然代码会无法在其他人环境中编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">gcc -v</span><br><span class="line">g++ -v</span><br><span class="line">qmake -v</span><br></pre></td></tr></table></figure>

<p>9.到第七步如果可以正常启动qt就说明已经安装成功了！</p>
<p>10.若有需要可以对g++，gcc的版本进行修改请参考下面的文章</p>
<p><a href="https://blog.csdn.net/weixin_44092851/article/details/124978302">linux修改gcc和g++的方法</a></p>
<p><strong>参考：</strong><a href="https://blog.csdn.net/weixin_44092851/article/details/124978823">文章来源</a></p>
]]></content>
  </entry>
  <entry>
    <title>Vue3基础</title>
    <url>/2023/04/15/Vue3%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230415231055729.png" alt="image-20230415231055729"></p>
<span id="more"></span>

<h1 id="使用Vue创建项目"><a href="#使用Vue创建项目" class="headerlink" title="使用Vue创建项目"></a>使用Vue创建项目</h1><p>1.首先cd到工作目录当中，然后使用下面的语句，搭建Vue的开发框架</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">npm create vue</span><br></pre></td></tr></table></figure>

<p>2.然后根据项目需要选择对应模块，我这边作为熟悉项目框架，所以都选择了no</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230416000823071.png" alt="image-20230416000823071"></p>
<p>3.这时已经创建好了一个项目，但是环境还没进行安装，所以还需要使用下面的指令，对环境进行安装，并将项目跑起来</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装依赖</span></span><br><span class="line">npm install</span><br><span class="line"></span><br><span class="line"><span class="comment">//启动项目</span></span><br><span class="line">npm run dev</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>4.我们删除其他页面，并新建一个App.vue页面，并对页面进行简单编辑与显示</p>
<p><img src="https://cug.oss-cn-guangzhou.aliyuncs.com/assets/image-20230416003556697.png" alt="image-20230416003556697"></p>
<hr>
<h1 id="Vue基础知识"><a href="#Vue基础知识" class="headerlink" title="Vue基础知识"></a>Vue基础知识</h1><h2 id="main-js中的概念"><a href="#main-js中的概念" class="headerlink" title="main.js中的概念"></a>main.js中的概念</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	App.vue是根组件</span></span><br><span class="line"><span class="comment">		- CreateApp(App)：将根组件关联到应用上</span></span><br><span class="line"><span class="comment">			- 会返回一个应用的实例</span></span><br><span class="line"><span class="comment">		- app.mount(&#x27;#app&#x27;)：将应用挂载到页面中</span></span><br><span class="line"><span class="comment">			- 会返回一个根组件的实例，组件的实例通常命名为vm</span></span><br><span class="line"><span class="comment">			- 组件实例是一个Proxy()对象（代理对象）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"><span class="keyword">const</span> vm = app.<span class="title function_">mount</span>(<span class="string">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="组件中的方法：methods"><a href="#组件中的方法：methods" class="headerlink" title="组件中的方法：methods"></a>组件中的方法：methods</h2><p><strong>methods</strong> 用来指定实例对象中的方法</p>
<ul>
<li>它是一个<strong>对象</strong>，可以在它里面定义多个方法</li>
<li>这些方法最终会被挂载到组件实例上</li>
<li>可以直接通过组件实例来调用这些方法</li>
<li>methods 中函数的<strong>this会被自动绑定为组件实例</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line"><span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)   <span class="comment">//组件实例， vm</span></span><br><span class="line">            <span class="title function_">alert</span>(<span class="string">&#x27;实例对象的方法&#x27;</span>)</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">changeMsg</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">msg</span> = <span class="string">&quot;新的消息！&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;changeMsg&quot;</span>&gt;</span>点我一下<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<h2 id="组件中的计算属性：computed"><a href="#组件中的计算属性：computed" class="headerlink" title="组件中的计算属性：computed"></a>组件中的计算属性：computed</h2><p><strong>computed</strong> 用来指定计算属性</p>
<p>在计算属性getter中，尽量<strong>只做读取</strong>相关的逻辑，不要执行哪些会产生（副）作用的代码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>:&#123;</span><br><span class="line">    属性名：getter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>计算属性，只在其依赖的数据发生变化时才会重新执行</li>
<li><strong>会对数据进行缓存</strong></li>
<li>可以为计算属性设置setter，使得计算属性可写，但是<strong>不建议这样做</strong></li>
</ul>
<h2 id="组合式API（setup）"><a href="#组合式API（setup）" class="headerlink" title="组合式API（setup）"></a>组合式API（setup）</h2><p>组合式API（setup）一般都是放在script标签内部</p>
<ul>
<li>使用组合式API，我们可以在script中直接定义变量和函数</li>
<li>使用组合式API直接<strong>定义的变量就是一个普通变量，不是响应式变量</strong></li>
<li>通过<strong>reactive函数</strong>可以在setup中<strong>创建一个响应式对象</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123; reactive &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line">    <span class="keyword">const</span> msg = <span class="string">&quot;组合式API&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建响应式变量</span></span><br><span class="line">    <span class="keyword">const</span> stu = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;原&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="响应式代理"><a href="#响应式代理" class="headerlink" title="响应式代理"></a>响应式代理</h2><p><strong>reactive()</strong></p>
<ul>
<li>返回一个<strong>对象</strong>的响应式代码</li>
<li>返回的是一个深层响应式对象</li>
<li>也可以使用shallowReactive()创建一个浅层响应式对象</li>
<li>缺点：<strong>只能返回对象的响应式代理！不能处理原始值</strong></li>
</ul>
<p><strong>ref()</strong></p>
<ul>
<li>接受一个任意值，并返回它的响应式代理</li>
<li><strong>访问ref对象</strong>时，必须通过 <strong>对象.value</strong>  来访问其中的值</li>
<li>在模板中，ref对象会被<strong>自动解包</strong>，不需要使用 对象.value.属性名，直接使用 <strong>对象.属性名</strong> 就可以直接访问</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123; reactive,ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line">    <span class="keyword">const</span> msg = <span class="string">&quot;组合式API&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//创建响应式变量</span></span><br><span class="line">    <span class="keyword">const</span> stu = <span class="title function_">reactive</span>(&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;原&quot;</span></span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//ref在生成响应式代理时，它是将值包装成了一个对象  0  ---&gt; &#123;value:0&#125;</span></span><br><span class="line">    <span class="keyword">const</span> count = <span class="title function_">ref</span>(<span class="number">0</span>)     <span class="comment">//生成一个0的响应式代理                                                                        </span></span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h2 id="v-bind-标签动态属性设置"><a href="#v-bind-标签动态属性设置" class="headerlink" title="v-bind 标签动态属性设置"></a>v-bind 标签动态属性设置</h2><p>对标签的属性进行动态设置时，需要使用到 v-bind 指令，</p>
<p>v-bind可以简写为  <strong>：</strong></p>
<p>当我们为一个布尔值设置属性时，如果为<strong>true</strong>则表示元素上<strong>有该属性</strong>，如果为<strong>false</strong>，则元素上<strong>没有该属性</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script setup&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; ref &#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">const</span> imgPath = <span class="title function_">ref</span>(<span class="string">&quot;/images/messi.png&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">changeImg</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    imgPath.<span class="property">value</span> = <span class="string">&quot;/images/neymar.png&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> attrs = &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&quot;box1&quot;</span>,</span><br><span class="line">    <span class="attr">class</span>: <span class="string">&quot;hello&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> attrName = <span class="string">&quot;title&quot;</span></span><br><span class="line"><span class="keyword">const</span> attrValue = <span class="string">&quot;这是一个title属性&quot;</span></span><br><span class="line"><span class="keyword">const</span> isDisabled = <span class="string">&quot;&quot;</span></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- &lt;button @click=&quot;changeImg&quot;&gt;切换图片&lt;/button&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">:</span>[<span class="attr">attrName</span>]=<span class="string">&quot;attrValue&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;imgPath&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;梅西&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">    //绑定属性组</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:</span>=<span class="string">&quot;attrs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">:disabled</span>=<span class="string">&quot;isDisabled&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="样式设置"><a href="#样式设置" class="headerlink" title="样式设置"></a>样式设置</h2><p>可以直接通过<strong>style标签</strong>来编写样式，<br>如果直接通过style标签写样式，此时编写的样式是<strong>全局样式</strong>会影响到所有的组件</p>
<p>可以为<strong>style标签添加一个scoped属性</strong>，<br>  这样样式将成为<strong>局部样式</strong>，只对当前组件生效<br>如何实现的？</p>
<ul>
<li><p>当我们在组件中使用scoped样式时，<br>vue会自动为组件中的所有元素生成一个随机的属性<br>形如：data-v-7a7a37b1<br>生成后，所有的选择器都会在最后添加一个 [data-v-7a7a37b1]<br>  h1 -&gt; h1[data-v-7a7a37b1]<br>  .box1 -&gt; .box1[data-v-7a7a37b1]</p>
</li>
<li><p>注意：</p>
<p>  随机生成的属性，除了会添加到当前组件内的所有元素上，<br>  也会添加到当前组件引入的其他组件的<strong>根元素</strong>上，这样设计<br>  是为了，可以通过父组件来为子组件设置一些样式.</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">h1 &#123;</span><br><span class="line">    background-<span class="attr">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="property">box1</span> &#123;</span><br><span class="line">    <span class="attr">width</span>: 200px;</span><br><span class="line">    <span class="attr">height</span>: 200px;</span><br><span class="line">    background-<span class="attr">color</span>: #bfa;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">将组件中所有的 h2的字体颜色设置为黄色 </span></span><br><span class="line"><span class="comment">.app h2 --&gt; .app h2[xxxxx]</span></span><br><span class="line"><span class="comment">.app h2[data-v-7a7a37b1] 没用deep</span></span><br><span class="line"><span class="comment">.app[data-v-7a7a37b1] h2 用了deep</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">.<span class="property">app</span> :<span class="title function_">deep</span>(<span class="params">h2</span>) &#123;</span><br><span class="line">    <span class="attr">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">  :global() 全局选择器</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">:<span class="title function_">global</span>(<span class="params">div</span>) &#123;</span><br><span class="line">    <span class="attr">border</span>: 1px red solid;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<p>style 表情内部也已设置全局样式（global()），这样就能全局生效了</p>
<hr>
<h2 id="练习：使用Vue搭建小网页"><a href="#练习：使用Vue搭建小网页" class="headerlink" title="练习：使用Vue搭建小网页"></a>练习：使用Vue搭建小网页</h2>]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/04/15/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
